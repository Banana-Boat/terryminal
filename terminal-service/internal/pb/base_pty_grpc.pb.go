// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: base_pty.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BasePtyClient is the client API for BasePty service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BasePtyClient interface {
	// 在BasePty中执行命令，返回结果
	RunCmd(ctx context.Context, opts ...grpc.CallOption) (BasePty_RunCmdClient, error)
}

type basePtyClient struct {
	cc grpc.ClientConnInterface
}

func NewBasePtyClient(cc grpc.ClientConnInterface) BasePtyClient {
	return &basePtyClient{cc}
}

func (c *basePtyClient) RunCmd(ctx context.Context, opts ...grpc.CallOption) (BasePty_RunCmdClient, error) {
	stream, err := c.cc.NewStream(ctx, &BasePty_ServiceDesc.Streams[0], "/BasePty/RunCmd", opts...)
	if err != nil {
		return nil, err
	}
	x := &basePtyRunCmdClient{stream}
	return x, nil
}

type BasePty_RunCmdClient interface {
	Send(*RunCmdRequest) error
	Recv() (*RunCmdResponse, error)
	grpc.ClientStream
}

type basePtyRunCmdClient struct {
	grpc.ClientStream
}

func (x *basePtyRunCmdClient) Send(m *RunCmdRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *basePtyRunCmdClient) Recv() (*RunCmdResponse, error) {
	m := new(RunCmdResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BasePtyServer is the server API for BasePty service.
// All implementations must embed UnimplementedBasePtyServer
// for forward compatibility
type BasePtyServer interface {
	// 在BasePty中执行命令，返回结果
	RunCmd(BasePty_RunCmdServer) error
	mustEmbedUnimplementedBasePtyServer()
}

// UnimplementedBasePtyServer must be embedded to have forward compatible implementations.
type UnimplementedBasePtyServer struct {
}

func (UnimplementedBasePtyServer) RunCmd(BasePty_RunCmdServer) error {
	return status.Errorf(codes.Unimplemented, "method RunCmd not implemented")
}
func (UnimplementedBasePtyServer) mustEmbedUnimplementedBasePtyServer() {}

// UnsafeBasePtyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BasePtyServer will
// result in compilation errors.
type UnsafeBasePtyServer interface {
	mustEmbedUnimplementedBasePtyServer()
}

func RegisterBasePtyServer(s grpc.ServiceRegistrar, srv BasePtyServer) {
	s.RegisterService(&BasePty_ServiceDesc, srv)
}

func _BasePty_RunCmd_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BasePtyServer).RunCmd(&basePtyRunCmdServer{stream})
}

type BasePty_RunCmdServer interface {
	Send(*RunCmdResponse) error
	Recv() (*RunCmdRequest, error)
	grpc.ServerStream
}

type basePtyRunCmdServer struct {
	grpc.ServerStream
}

func (x *basePtyRunCmdServer) Send(m *RunCmdResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *basePtyRunCmdServer) Recv() (*RunCmdRequest, error) {
	m := new(RunCmdRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BasePty_ServiceDesc is the grpc.ServiceDesc for BasePty service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BasePty_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "BasePty",
	HandlerType: (*BasePtyServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RunCmd",
			Handler:       _BasePty_RunCmd_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "base_pty.proto",
}
