// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: chatbot_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChatbotClient is the client API for Chatbot service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatbotClient interface {
	Chat(ctx context.Context, in *ChatRequest, opts ...grpc.CallOption) (Chatbot_ChatClient, error)
}

type chatbotClient struct {
	cc grpc.ClientConnInterface
}

func NewChatbotClient(cc grpc.ClientConnInterface) ChatbotClient {
	return &chatbotClient{cc}
}

func (c *chatbotClient) Chat(ctx context.Context, in *ChatRequest, opts ...grpc.CallOption) (Chatbot_ChatClient, error) {
	stream, err := c.cc.NewStream(ctx, &Chatbot_ServiceDesc.Streams[0], "/pb.Chatbot/Chat", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatbotChatClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Chatbot_ChatClient interface {
	Recv() (*ChatResponse, error)
	grpc.ClientStream
}

type chatbotChatClient struct {
	grpc.ClientStream
}

func (x *chatbotChatClient) Recv() (*ChatResponse, error) {
	m := new(ChatResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChatbotServer is the server API for Chatbot service.
// All implementations must embed UnimplementedChatbotServer
// for forward compatibility
type ChatbotServer interface {
	Chat(*ChatRequest, Chatbot_ChatServer) error
	mustEmbedUnimplementedChatbotServer()
}

// UnimplementedChatbotServer must be embedded to have forward compatible implementations.
type UnimplementedChatbotServer struct {
}

func (UnimplementedChatbotServer) Chat(*ChatRequest, Chatbot_ChatServer) error {
	return status.Errorf(codes.Unimplemented, "method Chat not implemented")
}
func (UnimplementedChatbotServer) mustEmbedUnimplementedChatbotServer() {}

// UnsafeChatbotServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatbotServer will
// result in compilation errors.
type UnsafeChatbotServer interface {
	mustEmbedUnimplementedChatbotServer()
}

func RegisterChatbotServer(s grpc.ServiceRegistrar, srv ChatbotServer) {
	s.RegisterService(&Chatbot_ServiceDesc, srv)
}

func _Chatbot_Chat_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ChatRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatbotServer).Chat(m, &chatbotChatServer{stream})
}

type Chatbot_ChatServer interface {
	Send(*ChatResponse) error
	grpc.ServerStream
}

type chatbotChatServer struct {
	grpc.ServerStream
}

func (x *chatbotChatServer) Send(m *ChatResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Chatbot_ServiceDesc is the grpc.ServiceDesc for Chatbot service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Chatbot_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Chatbot",
	HandlerType: (*ChatbotServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Chat",
			Handler:       _Chatbot_Chat_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "chatbot_service.proto",
}
