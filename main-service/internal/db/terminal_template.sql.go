// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: terminal_template.sql

package db

import (
	"context"
	"database/sql"
)

const createTerminalTemplate = `-- name: CreateTerminalTemplate :execresult
INSERT INTO terminal_templates (
  name, image_name, size, description
) VALUES (
  ?, ?, ?, ?
)
`

type CreateTerminalTemplateParams struct {
	Name        string `json:"name"`
	ImageName   string `json:"imageName"`
	Size        string `json:"size"`
	Description string `json:"description"`
}

func (q *Queries) CreateTerminalTemplate(ctx context.Context, arg CreateTerminalTemplateParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createTerminalTemplate,
		arg.Name,
		arg.ImageName,
		arg.Size,
		arg.Description,
	)
}

const getTerminalTemplateById = `-- name: GetTerminalTemplateById :one
SELECT id, name, image_name, size, description, created_at, updated_at FROM terminal_templates
WHERE id = ? LIMIT 1
`

func (q *Queries) GetTerminalTemplateById(ctx context.Context, id int64) (TerminalTemplate, error) {
	row := q.db.QueryRowContext(ctx, getTerminalTemplateById, id)
	var i TerminalTemplate
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ImageName,
		&i.Size,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTerminalTemplates = `-- name: GetTerminalTemplates :many
SELECT id, name, image_name, size, description, created_at, updated_at FROM terminal_templates
`

func (q *Queries) GetTerminalTemplates(ctx context.Context) ([]TerminalTemplate, error) {
	rows, err := q.db.QueryContext(ctx, getTerminalTemplates)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TerminalTemplate{}
	for rows.Next() {
		var i TerminalTemplate
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.ImageName,
			&i.Size,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
