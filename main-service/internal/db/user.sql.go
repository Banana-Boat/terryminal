// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: user.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createUser = `-- name: CreateUser :execresult
INSERT INTO users (
  email, nickname, password
) VALUES (
  ?, ?, ?
)
`

type CreateUserParams struct {
	Email    string `json:"email"`
	Nickname string `json:"nickname"`
	Password string `json:"password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createUser, arg.Email, arg.Nickname, arg.Password)
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, nickname, password, chatbot_token, verification_code, expired_at, created_at, updated_at FROM users
WHERE email = ? LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Nickname,
		&i.Password,
		&i.ChatbotToken,
		&i.VerificationCode,
		&i.ExpiredAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, email, nickname, password, chatbot_token, verification_code, expired_at, created_at, updated_at FROM users
WHERE id = ? LIMIT 1
`

func (q *Queries) GetUserById(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Nickname,
		&i.Password,
		&i.ChatbotToken,
		&i.VerificationCode,
		&i.ExpiredAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const isUserExisted = `-- name: IsUserExisted :one
SELECT EXISTS(
  SELECT 1 FROM users
  WHERE email = ? LIMIT 1
)
`

func (q *Queries) IsUserExisted(ctx context.Context, email string) (bool, error) {
	row := q.db.QueryRowContext(ctx, isUserExisted, email)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users 
SET password = ?, nickname = ?, chatbot_token = ?, updated_at = ?
WHERE id = ?
`

type UpdateUserParams struct {
	Password     string    `json:"password"`
	Nickname     string    `json:"nickname"`
	ChatbotToken int32     `json:"chatbotToken"`
	UpdatedAt    time.Time `json:"updatedAt"`
	ID           int64     `json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser,
		arg.Password,
		arg.Nickname,
		arg.ChatbotToken,
		arg.UpdatedAt,
		arg.ID,
	)
	return err
}

const updateVerificationCode = `-- name: UpdateVerificationCode :exec
UPDATE users
SET verification_code = ?, expired_at = ?, updated_at = ?
WHERE id = ?
`

type UpdateVerificationCodeParams struct {
	VerificationCode sql.NullString `json:"verificationCode"`
	ExpiredAt        sql.NullTime   `json:"expiredAt"`
	UpdatedAt        time.Time      `json:"updatedAt"`
	ID               int64          `json:"id"`
}

func (q *Queries) UpdateVerificationCode(ctx context.Context, arg UpdateVerificationCodeParams) error {
	_, err := q.db.ExecContext(ctx, updateVerificationCode,
		arg.VerificationCode,
		arg.ExpiredAt,
		arg.UpdatedAt,
		arg.ID,
	)
	return err
}
