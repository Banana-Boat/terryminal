// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: terminal.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createTerminal = `-- name: CreateTerminal :execresult
INSERT INTO terminals (
  name, size, remark, owner_id, template_id, total_duration
) VALUES (
  ?, ?, ?, ?, ?, ?
)
`

type CreateTerminalParams struct {
	Name          string `json:"name"`
	Size          string `json:"size"`
	Remark        string `json:"remark"`
	OwnerID       int64  `json:"ownerID"`
	TemplateID    int64  `json:"templateID"`
	TotalDuration int32  `json:"totalDuration"`
}

func (q *Queries) CreateTerminal(ctx context.Context, arg CreateTerminalParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createTerminal,
		arg.Name,
		arg.Size,
		arg.Remark,
		arg.OwnerID,
		arg.TemplateID,
		arg.TotalDuration,
	)
}

const deleteTerminal = `-- name: DeleteTerminal :exec
DELETE FROM terminals
WHERE id = ?
`

func (q *Queries) DeleteTerminal(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTerminal, id)
	return err
}

const getTerminalById = `-- name: GetTerminalById :one
SELECT id, name, size, remark, owner_id, template_id, total_duration, created_at, updated_at FROM terminals
WHERE id = ? LIMIT 1
`

func (q *Queries) GetTerminalById(ctx context.Context, id int64) (Terminal, error) {
	row := q.db.QueryRowContext(ctx, getTerminalById, id)
	var i Terminal
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Size,
		&i.Remark,
		&i.OwnerID,
		&i.TemplateID,
		&i.TotalDuration,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTerminalByOwnId = `-- name: GetTerminalByOwnId :many
SELECT id, name, size, remark, owner_id, template_id, total_duration, created_at, updated_at FROM terminals
WHERE owner_id = ?
`

func (q *Queries) GetTerminalByOwnId(ctx context.Context, ownerID int64) ([]Terminal, error) {
	rows, err := q.db.QueryContext(ctx, getTerminalByOwnId, ownerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Terminal{}
	for rows.Next() {
		var i Terminal
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Size,
			&i.Remark,
			&i.OwnerID,
			&i.TemplateID,
			&i.TotalDuration,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTerminalInfo = `-- name: UpdateTerminalInfo :exec
UPDATE terminals
SET size = ?, remark = ?, total_duration = ?, updated_at = ?
WHERE id = ?
`

type UpdateTerminalInfoParams struct {
	Size          string    `json:"size"`
	Remark        string    `json:"remark"`
	TotalDuration int32     `json:"totalDuration"`
	UpdatedAt     time.Time `json:"updatedAt"`
	ID            int64     `json:"id"`
}

func (q *Queries) UpdateTerminalInfo(ctx context.Context, arg UpdateTerminalInfoParams) error {
	_, err := q.db.ExecContext(ctx, updateTerminalInfo,
		arg.Size,
		arg.Remark,
		arg.TotalDuration,
		arg.UpdatedAt,
		arg.ID,
	)
	return err
}
